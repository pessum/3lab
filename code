#include <iostream>
#include <iterator>
#include <stack>
#include <sstream>
#include <vector>
#include <fstream>
#include <Windows.h>
#include <math.h>
using namespace std;
HANDLE N = GetStdHandle(STD_OUTPUT_HANDLE);







bool isOperator(char c)
{
	return (!isalpha(c) && !isdigit(c));
}





int getPriority(char C)
{
	if (C == '-' || C == '+')
		return 1;
	else if (C == '*' || C == '/')
		return 2;
	else if (C == '^')
		return 3;
	return 0;
}

string infixToPostfix(string infix)
{
	infix = '(' + infix + ')';
	int l = infix.size();
	stack<char> st;
	string output;

	for (int i = 0; i < l; i++) {

		
		if (isalpha(infix[i]) || isdigit(infix[i]))
			output += infix[i];

		else if (infix[i] == '(')
			st.push('(');

		
		else if (infix[i] == ')') {
			while (st.top() != '(') {
				output += st.top();
				st.pop();
			}

			
			st.pop();
		}

		
		else
		{
			if (isOperator(st.top()))
			{
				if (infix[i] == '^')
				{
					while (getPriority(infix[i]) <= getPriority(st.top()))
					{
						output += st.top();
						st.pop();
					}

				}
				else
				{
					while (getPriority(infix[i]) < getPriority(st.top()))
					{
						output += st.top();
						st.pop();
					}

				}

				
				st.push(infix[i]);
			}
		}
	}
	return output;
}

string infixToPrefix(string infix)
{
	
	int l = infix.size();


	reverse(infix.begin(), infix.end());

	
	for (int i = 0; i < l; i++) {

		if (infix[i] == '(') {
			infix[i] = ')';
			i++;
		}
		else if (infix[i] == ')') {
			infix[i] = '(';
			i++;
		}
	}

	string prefix = infixToPostfix(infix);

	reverse(prefix.begin(), prefix.end());

	return prefix;
}


















int isPostfix(string c) {
	int len = c.length();
	if ((c[len - 1] == ')') || (c[len - 1] == '(')) {
		return 1;
	}
	if (isOperator(c[len - 1]) == 0) {
		return 1;
		}
	
	return -1;
}



int isPrefix(string c) {

	
	if ((c[0] == ')') || (c[0] == '(')) {
		return 1;
	}
	if (isOperator(c[0]) == 0) {

		return 1;
	}
		
	return -1;
}





int evaluatePostfixFile(string s) {

	stack<int> st;
	for (int i = 0; i < s.length(); i++) {
		if (!isOperator(s[i])) {
			st.push(s[i] - '0');
		}
		else {
			int op2 = st.top();
			st.pop();
			int op1 = st.top();
			st.pop();



			switch (s[i])
			{
			case '+':
				st.push(op1 + op2);
				
				break;

			case '-':
				st.push(op1 - op2);
				
				break;

			case '*':
				st.push(op1 * op2);
				
				break;


			case '/':
				st.push(op1 / op2);
				
				break;

			case '^':
				st.push(pow(op1, op2));
				
				break;
			}
		}

	}

	return st.top();
}

int evaluatePostfix(string s) {

	stack<int> st;
	for (int i = 0; i < s.length(); i++) {
		if (!isOperator(s[i])) {
			st.push(s[i] - '0');
		}
		else {
			int op2 = st.top();
			st.pop();
			int op1 = st.top();
			st.pop();



			switch (s[i])
			{
			case '+':
				st.push(op1 + op2);
				cout << op1;
				cout << "+";
				cout << op2 << endl;
				break;

			case '-':
				st.push(op1 - op2);
				cout << op1;
				cout << "-";
				cout << op2 << endl;
				break;

			case '*':
				st.push(op1 * op2);
				cout << op1;
				cout << "*";
				cout << op2 << endl;
				break;


			case '/':
				st.push(op1 / op2);
				cout << op1;
				cout << "/";
				cout << op2 << endl;
				break;

			case '^':
				st.push(pow(op1, op2));
				cout << op1;
				cout << "^";
				cout << op2 << endl;
				break;
			}
		}

	}
	
	return st.top();
}



double evaluatePrefixFile(string s)
{
	stack<int> st;

	for (int i = s.size() - 1; i >= 0; i--) {


		if (!isOperator(s[i]))
			st.push(s[i] - '0');

		else {


			double op1 = st.top();
			st.pop();
			double op2 = st.top();
			st.pop();

			switch (s[i]) {
			case '+':
				st.push(op1 + op2);
				
				break;
			case '-':
				st.push(op1 - op2);
				
				break;
			case '*':
				st.push(op1 * op2);
			
				break;
			case '/':
				st.push(op1 / op2);
				
				break;
			case '^':
				st.push(pow(op1, op2));
				
				break;




			}
		}
	}

	return st.top();
}




double evaluatePrefix(string s)
{
	stack<int> st;

	for (int i = s.size() - 1; i >= 0; i--) {

		
		if (!isOperator(s[i])) 
			st.push(s[i] - '0');

		else {

			
			double op1 = st.top();
			st.pop();
			double op2 = st.top();
			st.pop();

			switch (s[i]) {
			case '+':
				st.push(op1 + op2);
				cout << op1;
				cout << "+";
				cout << op2 << endl;
				break;
			case '-':
				st.push(op1 - op2);
				cout << op1;
				cout << "-";
				cout << op2 << endl;
				break;
			case '*':
				st.push(op1 * op2);
				cout << op1;
				cout << "*";
				cout << op2 << endl;
				break;
			case '/':
				st.push(op1 / op2);
				cout << op1;
				cout << "/";
				cout << op2 << endl;
				break;
			case '^':
				st.push(pow(op1, op2));
				cout << op1;
				cout << "^";
				cout << op2 << endl;
				break;
			



			}
		}
	}

	return st.top();
}


int main()
{
	int answer = 0;

	

	while (answer != 11) {
		SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "Menu" << endl;
		cout << "Do not leave space between operands!" << endl;
		SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "1. Convert expression to postfix notation." << endl;
		cout << "2. Convert expression to prefix totation." << endl;
		cout << "3. Check expression written in infix notation." << endl;
		cout << "4. Check expression written in postfix notation." << endl;
		cout << "5. Check expression written in prefix notation." << endl;
		cout << "6. Evaluate expression written in infix notation." << endl;
		cout << "7. Evaluate expression written in postfix notation." << endl;
		cout << "8. Evaluate expression written in prefix notation." << endl;
		cout << "9. Output several examples of postfix expression evaluation." << endl;
		cout << "10. Output several examples of prefix expression evaluation." << endl;
		cout << "11. ";
		SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "Exit" << endl;
		SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cin >> answer;
		system("CLS");


		switch (answer)
		{
		case (1): {

			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{
				case (1): {
					cin.ignore();
					string infix;
					getline(cin, infix);
					cout << infixToPostfix(infix) << endl;;
					break;
				}


				case (2): {

					string infix;
					ifstream file;
					file.open("sample.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					cout << infixToPostfix(infix) << endl;;
					file.close();
					break;
				}
				}
			}
			break;
		}
		
		case (2): {


			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{
				case (1): {




					cin.ignore();
					string infix;
					getline(cin, infix);
					cout << infixToPrefix(infix) << endl;
					break;
				}
				
				case (2): {

					string infix;
					ifstream file;
					file.open("sample.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					cout << infixToPrefix(infix) << endl;
					file.close();
					break;
				
				}
				}


					
				}
			break;
		}


		case (3): {


			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{
				case (1): {

					cin.ignore();
					string infix;
					getline(cin, infix);
					if ((isPrefix(infix) == 1) && (isPostfix(infix) == 1)) {
						cout << "Expression is correct" << endl;
					}
					else {

						cout << "Error" << endl;
					}

					break;
				}


				case (2): {

					string infix;
					ifstream file;
					file.open("infix.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					if ((isPrefix(infix) == 1) && (isPostfix(infix) == 1)) {
						cout << "Expression is correct" << endl;
					}
					else {

						cout << "Error" << endl;
					}
					file.close();
					break;

				}


				}
			}

				break;

			}
		
			
			




		
		case (4): {


			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{
				case (1): {

					cin.ignore();
					string infix;
					getline(cin, infix);
					if (isPostfix(infix) == 1) {
						cout << "Error" << endl;
					}
					else {
						cout << "Expression is correct" << endl;
					}

					break;
				}


				case (2): {

					string infix;
					ifstream file;
					file.open("postfix.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					if (isPostfix(infix) == 1) {
						cout << "Error" << endl;
						
					}
					else {
						cout << "Expression is correct" << endl;
						
					}
					file.close();
					break;

				}







				}
			}

						  break;
		}



		case (5): {



			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{


				case (1): {

					cin.ignore();
					string infix;
					getline(cin, infix);
					if (isPrefix(infix) == 1) {
						cout << "Error" << endl;
					}
					else {
						cout << "Expression is correct" << endl;
					}

					break;
				}



				case (2): {

					string infix;
					ifstream file;
					file.open("prefix.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					if (isPrefix(infix) == 1) {
						cout << "Error" << endl;

					}
					else {
						cout << "Expression is correct" << endl;

					}
					file.close();
					break;

				}







				}
			}
			break;

		}



		case (6): {


			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{


				case (1): {
					cin.ignore();
					string infix;
					getline(cin, infix);
					infix = infixToPostfix(infix);
					cout << evaluatePostfix(infix) << endl;

					break;
				}

				case (2): {

					string infix;
					ifstream file;
					file.open("infixE.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					infix = infixToPostfix(infix);
					cout << evaluatePostfix(infix) << endl;
					file.close();
					break;

				}
				}
			}












			break;
		}




		case (7): {

			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{


				case (1): {
					cin.ignore();
					string infix;
					getline(cin, infix);
					cout << evaluatePostfix(infix) << endl;

					break;
				}

				case (2): {

					string infix;
					ifstream file;
					file.open("postfixE.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					cout << evaluatePostfix(infix) << endl;
					file.close();
					break;

				}
				}
			}

						  break;

		}
		case (8): {

			int key = 0;
			while (key != 3) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Select input method:" << endl;

				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. From keyboard" << endl;
				cout << "2. From file" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "3. Exit" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> key;
				system("CLS");


				switch (key)
				{


				case (1): {
					cin.ignore();
					string infix;
					getline(cin, infix);
					cout << evaluatePrefix(infix) << endl;


					break;
				}


				case (2): {

					string infix;
					ifstream file;
					file.open("prefixE.txt");

					if (file) {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File opened!" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					else {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "File doesn't exist";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					while (!file.eof())
					{
						file >> infix;
					}
					cout << infix << endl;
					cout << evaluatePrefix(infix) << endl;
					file.close();
					break;



				}
				}
			}


						  break;
		}
		
		case (9): {

			fstream file;
			fstream answers;
			int n;
			SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "Enter the amount of examples you want to print (1-9): ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cin >> n;
		
			file.open("verifPostfix.txt", ios::in); 
			if (file.is_open()) { 
				string tp;
				answers.open("answersPostfix.txt", ios::app);
				for (int i = 0; i < n; i++) {
					(getline(file, tp));  
					cout << tp << endl;
					cout << evaluatePostfix(tp) << endl;
					cout << endl;
					answers << evaluatePostfixFile(tp) << endl;
				}
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
				cout << "Answers were written into file." << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				answers.close();
				}
			
				file.close(); 
				break;

		}

		case (10): {

			fstream file;
			fstream answers;
			int n;
			SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "Enter the amount of examples you want to print: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cin >> n;

			file.open("verifPrefix.txt", ios::in); 
			if (file.is_open()) {  
				string tp;
				answers.open("answersPrefix.txt", ios::app);
				for (int i = 0; i < n; i++) {
					(getline(file, tp)); 
					cout << tp << endl;
					cout << evaluatePrefix(tp) << endl;
					cout << endl;
					answers << evaluatePrefixFile(tp) << endl;
				}
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
				cout << "Answers were written into file." << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				answers.close();

			}
			
			file.close(); 
			break;

			
		}

				  return 0;
		}


				





	}


}


